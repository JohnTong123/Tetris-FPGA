module song_rom (
    input  logic        beat,
    input  logic        rst,
    output logic [6:0]  note1,
    output logic [6:0]  note2,
    output logic [6:0]  note3
);
    // each note two hex chars - first for octave, second for note
    typedef struct packed {
        logic [6:0] n1, n2, n3;
    } note_triple_t;

    note_triple_t rom [0:127];

    // tetris song
    initial begin
        rom[0]  = '{7'h48, 7'h00, 7'h28};
        rom[1]  = '{7'h48, 7'h00, 7'h38};
        rom[2]  = '{7'h43, 7'h3C, 7'h28};
        rom[3]  = '{7'h44, 7'h00, 7'h38};
        rom[4]  = '{7'h46, 7'h00, 7'h28};
        rom[5]  = '{7'h46, 7'h00, 7'h38};
        rom[6]  = '{7'h44, 7'h41, 7'h28};
        rom[7]  = '{7'h43, 7'h3C, 7'h38};
        
        rom[8]  = '{7'h41, 7'h38, 7'h21};
        rom[9]  = '{7'h41, 7'h00, 7'h31};
        rom[10] = '{7'h41, 7'h00, 7'h21};
        rom[11] = '{7'h44, 7'h00, 7'h31};
        rom[12] = '{7'h48, 7'h00, 7'h21};
        rom[13] = '{7'h48, 7'h00, 7'h31};
        rom[14] = '{7'h46, 7'h00, 7'h21};
        rom[15] = '{7'h44, 7'h00, 7'h31};
        
        rom[16] = '{7'h43, 7'h3C, 7'h1C};
        rom[17] = '{7'h43, 7'h3C, 7'h2C};
        rom[18] = '{7'h43, 7'h3C, 7'h1C};
        rom[19] = '{7'h44, 7'h41, 7'h2C};
        rom[20] = '{7'h46, 7'h43, 7'h1C};
        rom[21] = '{7'h46, 7'h00, 7'h2C};
        rom[22] = '{7'h48, 7'h00, 7'h1C};
        rom[23] = '{7'h48, 7'h00, 7'h2C};
        
        rom[24] = '{7'h44, 7'h00, 7'h21};
        rom[25] = '{7'h44, 7'h00, 7'h31};
        rom[26] = '{7'h41, 7'h00, 7'h21};
        rom[27] = '{7'h00, 7'h00, 7'h31};
        rom[28] = '{7'h41, 7'h00, 7'h21};
        rom[29] = '{7'h41, 7'h00, 7'h31};
        rom[30] = '{7'h00, 7'h00, 7'h33};
        rom[31] = '{7'h00, 7'h00, 7'h34};
        
        rom[32] = '{7'h00, 7'h36, 7'h26};
        rom[33] = '{7'h46, 7'h39, 7'h36};
        rom[34] = '{7'h46, 7'h39, 7'h26};
        rom[35] = '{7'h49, 7'h41, 7'h36};
        rom[36] = '{7'h51, 7'h44, 7'h26};
        rom[37] = '{7'h51, 7'h44, 7'h36};
        rom[38] = '{7'h4B, 7'h43, 7'h26};
        rom[39] = '{7'h49, 7'h41, 7'h36};
        
        rom[40] = '{7'h48, 7'h3B, 7'h24};
        rom[41] = '{7'h48, 7'h3B, 7'h34};
        rom[42] = '{7'h48, 7'h3B, 7'h24};
        rom[43] = '{7'h44, 7'h38, 7'h34};
        rom[44] = '{7'h48, 7'h3B, 7'h24};
        rom[45] = '{7'h48, 7'h3B, 7'h34};
        rom[46] = '{7'h46, 7'h39, 7'h24};
        rom[47] = '{7'h44, 7'h38, 7'h34};
        
        rom[48] = '{7'h43, 7'h3C, 7'h23};
        rom[49] = '{7'h43, 7'h3C, 7'h33};
        rom[50] = '{7'h43, 7'h3C, 7'h23};
        rom[51] = '{7'h44, 7'h41, 7'h33};
        rom[52] = '{7'h46, 7'h43, 7'h23};
        rom[53] = '{7'h46, 7'h00, 7'h33};
        rom[54] = '{7'h48, 7'h00, 7'h23};
        rom[55] = '{7'h48, 7'h00, 7'h33};
        
        rom[56] = '{7'h44, 7'h00, 7'h21};
        rom[57] = '{7'h44, 7'h00, 7'h31};
        rom[58] = '{7'h41, 7'h00, 7'h21};
        rom[59] = '{7'h00, 7'h00, 7'h31};
        rom[60] = '{7'h41, 7'h00, 7'h21};
        rom[61] = '{7'h41, 7'h00, 7'h31};
        rom[62] = '{7'h00, 7'h00, 7'h21};
        rom[63] = '{7'h00, 7'h00, 7'h31};
        
        // ------------------------------
        
        rom[64]  = '{7'h38, 7'h34, 7'h21};
        rom[65]  = '{7'h38, 7'h34, 7'h28};
        rom[66]  = '{7'h38, 7'h34, 7'h21};
        rom[67]  = '{7'h38, 7'h34, 7'h28};
        rom[68]  = '{7'h34, 7'h31, 7'h21};
        rom[69]  = '{7'h34, 7'h31, 7'h28};
        rom[70]  = '{7'h34, 7'h31, 7'h21};
        rom[71]  = '{7'h34, 7'h31, 7'h28};
        
        rom[72]  = '{7'h36, 7'h33, 7'h1C};
        rom[73]  = '{7'h36, 7'h33, 7'h28};
        rom[74]  = '{7'h36, 7'h33, 7'h1C};
        rom[75]  = '{7'h36, 7'h33, 7'h28};
        rom[76]  = '{7'h33, 7'h2C, 7'h1C};
        rom[77]  = '{7'h33, 7'h2C, 7'h28};
        rom[78]  = '{7'h33, 7'h2C, 7'h1C};
        rom[79]  = '{7'h33, 7'h2C, 7'h28};
        
        rom[80]  = '{7'h34, 7'h31, 7'h21};
        rom[81]  = '{7'h34, 7'h31, 7'h28};
        rom[82]  = '{7'h34, 7'h31, 7'h21};
        rom[83]  = '{7'h34, 7'h31, 7'h28};
        rom[84]  = '{7'h31, 7'h28, 7'h21};
        rom[85]  = '{7'h31, 7'h28, 7'h28};
        rom[86]  = '{7'h31, 7'h28, 7'h21};
        rom[87]  = '{7'h31, 7'h28, 7'h28};
        
        rom[88]  = '{7'h2C, 7'h28, 7'h1C};
        rom[89]  = '{7'h2C, 7'h00, 7'h28};
        rom[90]  = '{7'h2C, 7'h28, 7'h1C};
        rom[91]  = '{7'h2C, 7'h00, 7'h28};
        rom[92]  = '{7'h33, 7'h2C, 7'h1C};
        rom[93]  = '{7'h33, 7'h2C, 7'h28};
        rom[94]  = '{7'h33, 7'h2C, 7'h1C};
        rom[95]  = '{7'h33, 7'h2C, 7'h28};
       
        rom[96]  = '{7'h38, 7'h34, 7'h21};
        rom[97]  = '{7'h38, 7'h34, 7'h28};
        rom[98]  = '{7'h38, 7'h34, 7'h21};
        rom[99]  = '{7'h38, 7'h34, 7'h28};
        rom[100] = '{7'h34, 7'h31, 7'h21};
        rom[101] = '{7'h34, 7'h31, 7'h28};
        rom[102] = '{7'h34, 7'h31, 7'h21};
        rom[103] = '{7'h34, 7'h31, 7'h28};
        
        rom[104] = '{7'h36, 7'h33, 7'h1C};
        rom[105] = '{7'h36, 7'h33, 7'h28};
        rom[106] = '{7'h36, 7'h33, 7'h1C};
        rom[107] = '{7'h36, 7'h33, 7'h28};
        rom[108] = '{7'h33, 7'h2C, 7'h1C};
        rom[109] = '{7'h33, 7'h2C, 7'h28};
        rom[110] = '{7'h33, 7'h2C, 7'h1C};
        rom[111] = '{7'h33, 7'h2C, 7'h28};
        
        rom[112] = '{7'h34, 7'h31, 7'h21};
        rom[113] = '{7'h34, 7'h31, 7'h28};
        rom[114] = '{7'h38, 7'h34, 7'h21};
        rom[115] = '{7'h38, 7'h34, 7'h31};
        rom[116] = '{7'h41, 7'h38, 7'h21};
        rom[117] = '{7'h41, 7'h38, 7'h31};
        rom[118] = '{7'h41, 7'h38, 7'h21};
        rom[119] = '{7'h41, 7'h38, 7'h31};
        
        rom[120] = '{7'h3C, 7'h33, 7'h18};
        rom[121] = '{7'h3C, 7'h33, 7'h28};
        rom[122] = '{7'h3C, 7'h33, 7'h18};
        rom[123] = '{7'h3C, 7'h33, 7'h28};
        rom[124] = '{7'h3C, 7'h33, 7'h18};
        rom[125] = '{7'h3C, 7'h33, 7'h28};
        rom[126] = '{7'h3C, 7'h33, 7'h18};
        rom[127] = '{7'h3C, 7'h33, 7'h28};
    end
    
    logic [6:0] addr;
    logic rpt; // repeat the first eight measures
    
    always_ff @(posedge beat or posedge rst) begin
        if (rst) begin
            addr <= 0;
            rpt <= 0;
        end else begin
            addr <= addr + 1;
            if (addr == 63) begin
                if (~rpt) addr <= 0;    
                rpt <= ~rpt;
            end
        end
    end
    
    assign note1 = rom[addr].n1;
    assign note2 = rom[addr].n2;
    assign note3 = rom[addr].n3;

endmodule
